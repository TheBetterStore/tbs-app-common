AWSTemplateFormatVersion: 2010-09-09
Description: >-
  The Better Store Common Components

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: prod

  InfraBaseCFName:
    Type: String
    Default: tbs-infra-base

  StaticWebDomainName:
    Type: String
    Default: static.thebetterstore.net

Resources:

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub static-${AWS::Region}-${AWS::AccountId}-tbs-${Environment}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - Date

  PrivateBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    DependsOn: OriginAccessIdentity
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: CFGetBucketObjects
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt
                - OriginAccessIdentity
                - S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*
      Bucket: !Ref S3Bucket

  OriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: CloudFrontOriginAccessIdentityConfig

  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    DependsOn:
      - S3Bucket
      - OriginAccessIdentity
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref StaticWebDomainName
        Origins:
          - DomainName: !GetAtt
              - S3Bucket
              - DomainName
            Id: hostingS3Bucket
            S3OriginConfig:
              OriginAccessIdentity: !Join
                - ''
                - - origin-access-identity/cloudfront/
                  - !Ref OriginAccessIdentity
        Enabled: 'true'
        Comment: !Sub "${StaticWebDomainName}"
        ViewerCertificate:
          AcmCertificateArn: !Ref WebACMCertificate
          MinimumProtocolVersion: "TLSv1.2_2019"
          SslSupportMethod: sni-only

        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            QueryString: 'false'
          MaxTTL: 31536000
          MinTTL: 0
          TargetOriginId: hostingS3Bucket
          ViewerProtocolPolicy: redirect-to-https

        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 400
            ResponseCode: 200
            ResponsePagePath: /
          - ErrorCachingMinTTL: 300
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /
          - ErrorCachingMinTTL: 300
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /
        IPV6Enabled: false


  RecordSetA:
    Type: AWS::Route53::RecordSet
    DependsOn: CloudFrontDistribution
    Properties:
      HostedZoneId:
        Fn::ImportValue: !Sub "ROUTE53:${Environment}:HOSTEDZONES:PUBLIC:TBS"
      Name: !Sub "${StaticWebDomainName}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  RecordSetAAAA:
    Type: AWS::Route53::RecordSet
    DependsOn: CloudFrontDistribution
    Properties:
      HostedZoneId:
        Fn::ImportValue: !Sub "ROUTE53:${Environment}:HOSTEDZONES:PUBLIC:TBS"
      Name: !Sub "${StaticWebDomainName}"
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  WebACMCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      CertificateTransparencyLoggingPreference: ENABLED
      DomainName: !Sub "${StaticWebDomainName}"
      DomainValidationOptions:
        - DomainName: !Sub "${StaticWebDomainName}"
          HostedZoneId:
            Fn::ImportValue: !Sub "ROUTE53:${Environment}:HOSTEDZONES:PUBLIC:TBS"
      ValidationMethod: DNS
      Tags:
        - Key: "Name"
          Value: !Ref StaticWebDomainName